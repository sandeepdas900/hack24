trigger:
- main  # Trigger pipeline when changes are pushed to the main branch

stages:
# Stage 1: Build and Artifact Management
- stage: Build
  displayName: Build and Artifact Management
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: 'ubuntu-latest'  # Ubuntu-based image for the agent
    steps:
    # Task 1: List contents of the System Default Working Directory
    - bash: echo "Contents in System Default Working Directory"; ls -R $(System.DefaultWorkingDirectory)
    
    # Task 2: List contents of Build Artifact Staging Directory before copying files
    - bash: echo "Before copying to Build Artifact Directory"; ls -R $(Build.ArtifactStagingDirectory)
    
    # Task 3: Copy files (Copy files from source folder to target folder)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/terraform-manifests'  # Source folder with Terraform configuration
        Contents: '**'  # Copy all contents recursively
        TargetFolder: '$(Build.ArtifactStagingDirectory)'  # Target folder for artifacts
        OverWrite: true  # Allow overwriting of existing files
        
    # Task 4: List files from Build Artifact Staging Directory after copy
    - bash: echo "After copying to Build Artifact Directory"; ls -R $(Build.ArtifactStagingDirectory)
    
    # Task 5: Publish build artifacts to Azure Pipelines
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'  # Path to the artifact directory
        ArtifactName: 'terraform-manifests'  # Artifact name
        publishLocation: 'Container'  # Publish to the default Azure container

# Stage 2: Deploy (Using Terraform with AWS)
- stage: Deploy
  displayName: Deploy Infrastructure with Terraform on AWS
  jobs:
  - job: Deploy
    displayName: Deploy Job
    pool:
      vmImage: 'ubuntu-latest'  # Ubuntu-based image for the agent
    steps:
    
    # Task 1: Install Terraform
    - task: UseTerraform@0
      inputs:
        versionSpec: '1.x'  # Specify the Terraform version required
    
    # Task 2: Configure AWS CLI (to authenticate with AWS)
    - task: AWSCLI@1
      inputs:
        awsCredentials: 'AWSServiceConnection'  # Replace with your AWS Service Connection name
        regionName: 'ap-south-1'  # AWS Region
    
    # Task 3: Checkout the repository (in case of new updates in the pipeline)
    - task: Checkout@1
      inputs:
        repository: self  # Checkout the current repository containing the Terraform configuration
    
    # Task 4: Initialize Terraform
    - script: |
        terraform init \
          -backend-config="bucket=$(TF_STATE_BUCKET)" \
          -backend-config="region=ap-south-1" \
          -backend-config="key=terraform.tfstate"  # Initialize Terraform backend (use S3 for state storage)
      displayName: 'Terraform Init'

    # Task 5: Validate Terraform Configuration
    - script: |
        terraform validate
      displayName: 'Terraform Validate'

    # Task 6: Run Terraform Plan (create a plan)
    - script: |
        terraform plan -out=tfplan
      displayName: 'Terraform Plan'

    # Task 7: Apply the Terraform Plan (Only on the 'main' branch)
    - script: |
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Apply'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  # Apply only on 'main' branch
